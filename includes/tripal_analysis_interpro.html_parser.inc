<?php

/*******************************************************************************
 * @file
 * Parse Interpro HTML Output file into analysisfeatureprop table
*/
function tripal_analysis_interpro_parseHTMLFile($analysis_id, $interprofile, $parsego, $job_id) {

  // Prepare log
  $filename = preg_replace("/.*\/(.*)/", "$1", $interprofile);
  $logfile = tempnam(sys_get_temp_dir(), "tripal_analysis_interpro_import");
  $log = fopen($logfile, 'a'); // append parsing results to log file
  if (!$log) {
    print "ERROR: cannot open log file: $logfile\n";
    exit;
  }

  // Parsing started
  print "Parsing File:". $interprofile . " ...\n";
  fwrite($log, date("D M j G:i:s Y") . ". Loading $interprofile\n");

  // Get cvterm_id for 'analysis_interpro_output_iteration_hits' which is required
  // for inserting into the analysisfeatureprop table
  
  $sql = "SELECT CVT.cvterm_id FROM {cvterm} CVT ".
      "INNER JOIN {cv} ON cv.cv_id = CVT.cv_id ".
      "WHERE CVT.name = 'analysis_interpro_output_hit' ".
      "AND CV.name = 'tripal'";
  $type_id = chado_query($sql)->fetchField();
  print "cvterm_id for analysis_interpro_output_iteration_hits is $type_id\n";

  // Load the HTML file and convert it into XML for loading
  $dom = new domDocument;
  $dom->loadHTMLFile($interprofile);
  $xml = $dom->saveXML();
  $interproput = simplexml_load_string($xml);

  // Get html tables for parsing
  $tables = $interproput->children()->children();

  // Count the number of tables to be processed
  $no_iterations = 0;
  foreach ($tables as $tmp) {
    if ($tmp->getName() == 'table') {
      $no_iterations ++;
    }
  }
  print "$no_iterations html tables to be processed.\n";
  $interval = intval($no_iterations * 0.01);
  $idx_iterations = 0;

  // Processed the tables
  foreach ($tables as $table) {
    //if (preg_match('/No hits reported/', $table->asXML()) ) {
    //print "skipping this table b/c no hits are reported\n";
    //}
    // make sure we are looking at a table and its not an empty table
    if ($table->getName() == 'table' && !preg_match('/No hits reported/', $table->asXML()) ) {
      $idx_iterations ++;
      if ($idx_iterations % $interval == 0) {
        $percentage = (int) ($idx_iterations / $no_iterations * 100);        
        tripal_job_set_progress($job_id, $percentage);        
        print $percentage . "% ";
      }

      // Set job status
      // Get the first row and match its name with the feature name
      $firsttd = $table->children()->children()->children();
      $feature_id = 0;
      foreach ($firsttd as $b) {
        foreach ($b->children() as $a) {
          if ($a->getName() == 'a') {
            // Remove _ORF from the sequence name
            $seqname = preg_replace('/^(.+?)_\d_.+/', "$1", $a);
            print "seqname is $seqname\n";

            // Find out how many features match this uniquename
            $sql = "SELECT count(feature_id) FROM {feature} ".
                "WHERE uniquename = :uniquename ";
            $no_features = chado_query($sql, array(':uniquename' => $seqname))->fetchField();

            // If there is only one match, get the feature_id
            if ($no_features == 1) {
              $sql = "SELECT feature_id FROM {feature} ".
                  "WHERE uniquename = :uniquename ";
              $feature_id = chado_query($sql, array(':uniquename' => $seqname))->fetchField();
              print "\tfeature id is $feature_id\n";

              // If the uniquename matches more than one features then skip and print 'Ambiguous'
            } 
            elseif ($no_features > 1) {
              fwrite($log, "Ambiguous: " . $seqname . " matches more than one feature and is not processed.\n");
              continue;

              // If the uniquename did not match, skip and print 'Failed'
            } 
            else {
              fwrite($log, "Failed: " . $seqname . "\n");
            }

          }
        }
      }

      // Successfully matched. print 'Succeeded'. Add analysis_id and
      // feature_id to analysisfeature. Add the table as XML to analysisfeatureprop
      if ($feature_id) {

        //------------------------------------
        // Clease unwanted rows from the table
        //------------------------------------

        $parent_row =   "/<tr><td valign=\"top\"><b>Parent<\/b><\/td>\s*<td valign=\"top\">\s*no.*?parent<\/td>\s*<\/tr>/";
        $children_row = "/<tr><td valign=\"top\"><b>Children<\/b><\/td>\s*<td valign=\"top\">\s*no.*?children<\/td>\s*<\/tr>/";
        $found_row    = "/<tr><td valign=\"top\"><b>Found.*?in<\/b><\/td>\s*<td valign=\"top\">\s*no.*?entries<\/td>\s*<\/tr>/";
        $contains_row = "/<tr><td valign=\"top\"><b>Contains<\/b><\/td>\s*<td valign=\"top\">\s*no.*?entries<\/td>\s*<\/tr>/";
        $go_row       = "/<tr><td valign=\"top\"><b>GO.*?terms<\/b><\/td>\s*<td valign=\"top\">\s*none<\/td>\s*<\/tr>/";

        $table_txt = $table->asXML();
        $table_txt = preg_replace($parent_row, "", $table_txt);
        $table_txt = preg_replace($children_row, "", $table_txt);
        $table_txt = preg_replace($found_row, "", $table_txt);
        $table_txt = preg_replace($contains_row, "", $table_txt);
        $table_txt = preg_replace($go_row, "", $table_txt);

        //------------------------------------
        // Clease unwanted ORF link from table
        //------------------------------------
        $orf_link = "/<b><a href=\"\/iprscan\/wget.*?\">(.*?)<\/a><\/b>/";
        $table_txt = preg_replace($orf_link, "$1", $table_txt);

        //print "----------------------------\n";
        //print "old: ".$table->asXML()."\n\n\n";
        //print "----------------------------\n";
        //print "Fixed: $table_txt\n";
        //print "----------------------------\n";

        //------------------------------------
        // If this feature has already been associated with this analysis, do not reinsert
        // Otherwise, Insert into analysisfeature table
        //------------------------------------
        $sql = "Select analysisfeature_id as id from {analysisfeature} where feature_id = :feature_id and analysis_id = :analysis_id";
        $analysisfeature =  chado_query($sql, array(':feature_id' => $feature_id, ':analysis_id' => $analysis_id))->fetchObject();
        if ($analysisfeature) {
          $analysisfeature_id = $analysisfeature->id;
        }
        if (!$analysisfeature_id) {
          print "inserting analysisfeature\n";
          $sql = "INSERT INTO {analysisfeature} (feature_id, analysis_id) ".
              "VALUES (:feature_id, :analysis_id)";
          chado_query($sql, array(':feature_id' => $feature_id, ':analysis_id' => $analysis_id));
          $sql = "Select analysisfeature_id from {analysisfeature} where feature_id = :feature_id and analysis_id = :analysis_id";
          $analysisfeature =  chado_query($sql, array(':feature_id' => $feature_id, ':analysis_id' => $analysis_id))->fetchObject();
          $analysisfeature_id = $analysisfeature->id;
        }

        print "analysisfeature_id is $analysisfeature_id (analysis_id = $analysis_id; feature_id = $feature_id)\n";


        // Get the higest rank for this feature_id in analysisfeatureprop table.
        // If the value of the inserting content is not duplicate, add it to
        // analysisfeaturepro with 'higest_rank + 1'
        $sql = "SELECT MAX(rank) FROM {analysisfeatureprop} AFP ".
            "INNER JOIN {analysisfeature} AF ON AF.analysisfeature_id = AFP.analysisfeature_id ".
            "WHERE feature_id = :feature_id ".
            "AND analysis_id = :analysis_id ".
            "AND type_id = :type_id ";

        $afp =  chado_query($sql, array(':feature_id' => $feature_id, ':analysis_id' => $analysis_id, ':type_id' => $type_id))->fetchObject();
        $hi_rank = 0;
        if ($afp) {
          $hi_rank = $afp->max + 1;
        }

        //------------------------------------------------------------
        // Insert interpro html tags into analysisfeatureprop table
        //------------------------------------------------------------
        // Before inserting, make sure it's not a duplicate
        $sql = "SELECT value FROM {analysisfeatureprop} WHERE analysisfeature_id = :analysisfeature_id AND type_id = :type_id";
        $result = chado_query($sql, array(':analysisfeature_id' => $analysisfeature_id, ':type_id' => $type_id));
        $duplicate = 0;
        while ($afp_value = $result->fetchObject()) {
          if ($table_txt == $afp_value->value) {
            $duplicate = 1;
          }
        }
        if (!$duplicate) {
          $sql = "INSERT INTO {analysisfeatureprop} (analysisfeature_id, type_id, value, rank)".
              "VALUES (:analysisfeature_id, :type_id, :value, :rank)";
          chado_query($sql, array(':analysisfeature_id' => $analysisfeature_id, ':type_id' => $type_id, ':value' => $table_txt, ':rank' => $hi_rank));
          fwrite($log, " (Insert)\n"); // write to log
          print "\twriting table\n";
        } 
        else {
          fwrite($log, " (Skipped)\n");
          print "\tskipping table - dup\n";
        }

        // Parse GO terms. Make sure GO database schema is installed in chado
        $go_db_id = chado_query("SELECT db_id FROM {db} WHERE name='GO'")->fetchField();
        if (!$go_db_id) {
          print 'GO schema not installed in chado. GO terms are not processed.';
        }
        if ($go_db_id && $parsego) {
          $trs = $table->children();
          foreach ($trs as $tr) {
            $tds = $tr->children();
            foreach ($tds as $td) {
              $gotags = $td->children();
              foreach ($gotags as $gotag) {
                // Look for 'GO:accession#'
                if (preg_match("/^.*?GO:(\d+).*$/", $gotag, $matches)) {
                   
                  // Find cvterm_id for the matched GO term
                  $sql = "SELECT cvterm_id FROM {cvterm} CVT
                  INNER JOIN {dbxref} DBX ON CVT.dbxref_id = DBX.dbxref_id
                  WHERE DBX.accession = :accession AND DBX.db_id = :db_id";
                  $goterm_id = chado_query($sql, array(':accession' => $matches[1], ':db_id' => $go_db_id))->fetchField();
                   
                  //-------------------------------------------
                  // Insert GO terms into feature_cvterm table
                  //-------------------------------------------
                  // Default pub_id = 1 (NULL) was used
                  $sql = "INSERT INTO {feature_cvterm} (feature_id, cvterm_id, pub_id)
                  VALUES (:feature_id, :cvterm_id, 1)";
                  chado_query($sql, array(':feature_id' => $feature_id, ':cvterm_id' => $goterm_id));

                  //------------------------------------------------
                  // Insert GO terms into analysisfeatureprop table
                  //------------------------------------------------
                  $sql = "INSERT INTO {analysisfeatureprop} (analysisfeature_id, type_id, value, rank) ".
                      "VALUES (:analysisfeature_id, :type_id, :value, 0)";
                  chado_query($sql, array(':analysisfeature_id' => $analysisfeature_id, ':type_id' => $goterm_id, ':value' => $matches[1]));
                }
              }
            }
          }
        }
      }
    }
  }  
  print "Done.\nSuccessful and failed entries have been saved in the log file:\n $logfile\n";

  fwrite($log, "\n");
  fclose($log);
  return;
}
